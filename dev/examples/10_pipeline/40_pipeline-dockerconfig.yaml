#Example Pipeline to build a golang application using Tekton Pipelines with caching support.
#This Pipeline uses custom DOCKER_CONFIG parameter to pass the cache-upload  stepAction config for pulling/pushing images.
---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: pipeline-dockerconfig
spec:
  params:
    - name: repo_url
      type: string
    - name: revision
      type: string
    - name: registry
      type: string
    - name: buildCommand
      type: string
      default: go build -v .
    - name: cachePatterns
      type: array
      default: [ "**go.mod", "**go.sum" ]
    - name: image
      type: string
      default: golang:latest
    - name: force-cache-upload
      type: string
      default: "false"
  workspaces:
    - name: source
    - name: cred
  tasks:
    - displayName: Build go application
      name: build-task
      workspaces:
        - name: source
          workspace: source
      taskSpec:
        workspaces:
          - name: source
          - name: cred
        params:
          - name: buildCommand
            default: $(params.buildCommand)
          - name: cachePatterns
            default: $(params.cachePatterns)
          - name: image
            default: $(params.image)
        steps:
          - name: create-repo
            image: $(params.image)
            script: |
              mkdir -p $(workspaces.source.path)/repo
              chmod 777 $(workspaces.source.path)/repo
              ls -lart /workspace/source/repo
          - name: fetch-repo
            ref:
              resolver: http
              params:
                - name: url
                  value: https://raw.githubusercontent.com/tektoncd/catalog/main/stepaction/git-clone/0.1/git-clone.yaml
            params:
              - name: output-path
                value: $(workspaces.source.path)/repo
              - name: url
                value: $(params.repo_url)
              - name: revision
                value: $(params.revision)
          - name: cache-fetch
            ref:
              resolver: cluster
              params:
                - name: name
                  value: cache-fetch
                - name: namespace
                  value: openshift-pipelines
                - name: kind
                  value: stepaction
            params:
              - name: PATTERNS
                value: $(params.cachePatterns)
              - name: SOURCE
                value: oci://$(params.registry)/cache-go:{{hash}}
              - name: CACHE_PATH
                value: $(workspaces.source.path)/cache
              - name: WORKING_DIR
                value: $(workspaces.source.path)/repo
              - name: DOCKER_CONFIG
                value: $(workspaces.cred.path)/

          - image: $(params.image)
            workingDir: $(workspaces.source.path)/repo
            name: run-go-build
            env:
              - name: GOCACHE
                value: $(workspaces.source.path)/cache/gocache
              - name: GOMODCACHE
                value: $(workspaces.source.path)/cache/gomodcache
            script: |
              set -x
              git config --global --add safe.directory $(workspaces.source.path)/repo
              $(params.buildCommand)
              echo "Cache size is $(du -sh $(workspaces.source.path)/cache)"
          - name: cache-upload
            ref:
              resolver: cluster
              params:
                - name: name
                  value: cache-upload
                - name: namespace
                  value: openshift-pipelines
                - name: kind
                  value: stepaction
            params:
              - name: PATTERNS
                value: $(params.cachePatterns)
              - name: TARGET
                value: oci://$(params.registry)/cache-go:{{hash}}
              - name: CACHE_PATH
                value: $(workspaces.source.path)/cache
              - name: WORKING_DIR
                value: $(workspaces.source.path)/repo
              - name: DOCKER_CONFIG
                value: $(workspaces.cred.path)/

